{"version":3,"file":"static/js/687.ba8efa18.chunk.js","mappings":"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","sources":["Shared/Components/FormElements/ImageUpload.jsx","Shared/Components/FormElements/Input.js","Shared/Components/UIElements/Card.js","Shared/Components/UIElements/ErrorModal.js","Shared/Components/UIElements/Modal.jsx","Shared/hooks/form-hooks.js","Shared/hooks/http-hook.js","Shared/util/validators.js","User/Pages/Auth.jsx"],"sourcesContent":["import { useRef, useState, useEffect } from \"react\";\r\nimport Button from \"./Button\";\r\nimport \"./ImageUpload.css\";\r\n\r\nexport default function ImageUpload(props) {\r\n   const [file, setFile] = useState();\r\n   const [previewUrl, setPreviewUrl] = useState();\r\n   const [isValid, setIsValid] = useState(false);\r\n   const filePickerRef = useRef();\r\n   function pickedHandler(event) {\r\n      let pickedFile;\r\n      let fileIsValid = isValid;\r\n      if (event.target.files || event.target.files.length === 1) {\r\n         pickedFile = event.target.files[0];\r\n         setFile(pickedFile);\r\n         setIsValid(true);\r\n         fileIsValid = true;\r\n      } else {\r\n         setIsValid(false);\r\n         fileIsValid = false;\r\n      }\r\n      props.onInput(props.id, pickedFile, fileIsValid);\r\n   }\r\n   function pickImageHandler() {\r\n      filePickerRef.current.click();\r\n   }\r\n\r\n   useEffect(() => {\r\n      if (!file) return;\r\n      const fileReader = new FileReader();\r\n      fileReader.onload = () => {\r\n         setPreviewUrl(fileReader.result);\r\n      };\r\n      fileReader.readAsDataURL(file);\r\n   }, [file]);\r\n\r\n   return (\r\n      <div className=\"form-control\">\r\n         <input\r\n            id={props.id}\r\n            style={{ display: \"none\" }}\r\n            ref={filePickerRef}\r\n            type=\"file\"\r\n            accept=\".jpg,.png,.jpeg\"\r\n            onChange={pickedHandler}\r\n         />\r\n         <div className={`image-upload ${props.center && \"center\"}`}>\r\n            <div className=\"image-upload__preview\">\r\n               {previewUrl ? (\r\n                  <img src={previewUrl} alt=\"preview\" />\r\n               ) : (\r\n                  <p>Please pick an image.</p>\r\n               )}\r\n            </div>\r\n            <Button type=\"button\" onClick={pickImageHandler}>\r\n               PICK IMAGE\r\n            </Button>\r\n         </div>\r\n         {!isValid && <p>{props.errorText}</p>}\r\n      </div>\r\n   );\r\n}\r\n","import React, { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid)\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${!inputState.isValid && inputState.isTouched &&\n        'form-control--invalid'}`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\nimport Modal from \"./Modal\";\nimport Button from \"../FormElements/Button\";\n\nconst ErrorModal = (props) => {\n   return (\n      <Modal\n         onCancel={props.onClear}\n         header=\"An Error Occurred!\"\n         show={!!props.error}\n         footer={<Button onClick={props.onClear}>Okay</Button>}\n      >\n         <p>{props.error}</p>\n      </Modal>\n   );\n};\n\nexport default ErrorModal;\n","import ReactDOM from \"react-dom\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport Backdrop from \"./Backdrop\";\r\nimport \"./Modal.css\";\r\nconst ModalOverlay = (props) => {\r\n   const content = (\r\n      <div className={`modal ${props.className}`} style={props.style}>\r\n         <header className={`modal__header ${props.headerClass}`}>\r\n            <h2>{props.header}</h2>\r\n         </header>\r\n         <form\r\n            onSubmit={\r\n               props.onSubmit\r\n                  ? props.onSubmit\r\n                  : (event) => event.preventDefault()\r\n            }\r\n         >\r\n            <div className={`modal__content ${props.contentClass}`}>\r\n               {props.children}\r\n            </div>\r\n            <footer className={`modal__footer ${props.footerClass}`}>\r\n               {props.footer}\r\n            </footer>\r\n         </form>\r\n      </div>\r\n   );\r\n   return ReactDOM.createPortal(content, document.getElementById(\"modal-hook\"));\r\n};\r\nexport default function Modal(props) {\r\n   return (\r\n      <>\r\n         {props.show && <Backdrop onClick={props.onCancel} />}\r\n         <CSSTransition\r\n            in={props.show}\r\n            mountOnEnter\r\n            unmountOnExit\r\n            timeout={200}\r\n            classNames=\"modal\"\r\n         >\r\n            <ModalOverlay {...props} />\r\n         </CSSTransition>\r\n      </>\r\n   );\r\n}\r\n","import { useCallback, useReducer } from \"react\";\r\nconst formReducer = (state, action) => {\r\n   switch (action.type) {\r\n      case \"INPUT_CHANGE\":\r\n         let formIsValid = true;\r\n         for (const inputId in state.inputs) {\r\n            if (!state.inputs[inputId]) continue;\r\n            formIsValid =\r\n               formIsValid &&\r\n               (inputId === action.inputId\r\n                  ? action.isValid\r\n                  : state.inputs[inputId].isValid);\r\n         }\r\n         return {\r\n            ...state,\r\n            inputs: {\r\n               ...state.inputs,\r\n               [action.inputId]: {\r\n                  value: action.value,\r\n                  isValid: action.isValid,\r\n               },\r\n            },\r\n            isValid: formIsValid,\r\n         };\r\n      case \"SET_DATA\":\r\n         return {\r\n            inputs: action.inputs,\r\n            isValid: action.formIsValid,\r\n         };\r\n      default:\r\n         return state;\r\n   }\r\n};\r\nexport function useForm(initialInputs, initialFormValidity) {\r\n   const [formState, dispatch] = useReducer(formReducer, {\r\n      inputs: initialInputs,\r\n      isValid: initialFormValidity,\r\n   });\r\n   const inputHandler = useCallback((id, value, isValid) => {\r\n      dispatch({\r\n         type: \"INPUT_CHANGE\",\r\n         value: value,\r\n         isValid: isValid,\r\n         inputId: id,\r\n      });\r\n   }, []);\r\n   const setFormData = useCallback((inputData, formValidity) => {\r\n      dispatch({\r\n         type: \"SET_DATA\",\r\n         inputs: inputData,\r\n         formIsValid: formValidity,\r\n      });\r\n   }, []);\r\n   return [formState, inputHandler, setFormData];\r\n}\r\n","import { useState, useCallback, useRef, useEffect } from \"react\";\r\nexport function useHttpClient() {\r\n   const [isLoading, setIsLoading] = useState(false);\r\n   const [error, setError] = useState(null);\r\n   const activeHttpRequests = useRef([]);\r\n   const sendRequest = useCallback(\r\n      async (url, method = \"GET\", body = null, headers = {}) => {\r\n         setIsLoading(true);\r\n         const httpAbortCtrl = new AbortController();\r\n         activeHttpRequests.current.push(httpAbortCtrl);\r\n\r\n         try {\r\n            const response = await fetch(url, {\r\n               method,\r\n               body,\r\n               headers,\r\n               signal: httpAbortCtrl.signal,\r\n            });\r\n            const data = await response.json();\r\n            activeHttpRequests.current = activeHttpRequests.current.filter(\r\n               (re) => re !== httpAbortCtrl\r\n            );\r\n            if (!response.ok) throw new Error(data.message);\r\n            setIsLoading(false);\r\n            return data;\r\n         } catch (err) {\r\n            if (err.message !== \"The user aborted a request.\") {\r\n               setError(err.message);\r\n               setIsLoading(false);\r\n               throw error;\r\n            }\r\n         }\r\n      },\r\n      [error]\r\n   );\r\n   function clearError() {\r\n      setError(null);\r\n   }\r\n   useEffect(() => {\r\n      return () => {\r\n         try {\r\n            activeHttpRequests.current.forEach((abortCtrl) =>\r\n               abortCtrl.abort()\r\n            );\r\n         } catch (err) {}\r\n      };\r\n   }, []);\r\n   return { isLoading, error, sendRequest, clearError };\r\n}\r\n","const VALIDATOR_TYPE_REQUIRE = \"REQUIRE\";\r\nconst VALIDATOR_TYPE_MINLENGTH = \"MINLENGTH\";\r\nconst VALIDATOR_TYPE_MAXLENGTH = \"MAXLENGTH\";\r\nconst VALIDATOR_TYPE_MIN = \"MIN\";\r\nconst VALIDATOR_TYPE_MAX = \"MAX\";\r\nconst VALIDATOR_TYPE_EMAIL = \"EMAIL\";\r\nconst VALIDATOR_TYPE_FILE = \"FILE\";\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = (val) => ({\r\n   type: VALIDATOR_TYPE_MINLENGTH,\r\n   val: val,\r\n});\r\nexport const VALIDATOR_MAXLENGTH = (val) => ({\r\n   type: VALIDATOR_TYPE_MAXLENGTH,\r\n   val: val,\r\n});\r\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n   let isValid = true;\r\n   for (const validator of validators) {\r\n      if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n         isValid = isValid && value.trim().length > 0;\r\n      }\r\n      if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n         isValid = isValid && value.trim().length >= validator.val;\r\n      }\r\n      if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n         isValid = isValid && value.trim().length <= validator.val;\r\n      }\r\n      if (validator.type === VALIDATOR_TYPE_MIN) {\r\n         isValid = isValid && +value >= validator.val;\r\n      }\r\n      if (validator.type === VALIDATOR_TYPE_MAX) {\r\n         isValid = isValid && +value <= validator.val;\r\n      }\r\n      if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n         isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n      }\r\n   }\r\n   return isValid;\r\n};\r\n","import Input from \"../../Shared/Components/FormElements/Input\";\r\nimport Card from \"../../Shared/Components/UIElements/Card\";\r\nimport ErrorModal from \"../../Shared/Components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../Shared/Components/UIElements/LoadingSpinner\";\r\nimport Button from \"../../Shared/Components/FormElements/Button\";\r\nimport ImageUpload from \"../../Shared/Components/FormElements/ImageUpload\";\r\nimport { useState, useContext } from \"react\";\r\nimport {\r\n   VALIDATOR_EMAIL,\r\n   VALIDATOR_MINLENGTH,\r\n   VALIDATOR_REQUIRE,\r\n} from \"../../Shared/util/validators\";\r\nimport { useHttpClient } from \"../../Shared/hooks/http-hook\";\r\nimport { useForm } from \"../../Shared/hooks/form-hooks\";\r\nimport { AuthContext } from \"../../Shared/context/auth-context\";\r\nimport \"./Auth.css\";\r\n\r\nexport default function Auth() {\r\n   const auth = useContext(AuthContext);\r\n   const [isLogin, setIsLogin] = useState(true);\r\n   const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n   const [formState, inputHandler, setFormData] = useForm(\r\n      {\r\n         email: { value: \"\", isValid: false },\r\n         password: { value: \"\", isValid: false },\r\n      },\r\n      false\r\n   );\r\n   const authSubmitHandler = async (event) => {\r\n      event.preventDefault();\r\n\r\n      if (isLogin) {\r\n         try {\r\n            const data = await sendRequest(\r\n               process.env.REACT_APP_BACKEND_URL + \"/users/login\",\r\n               \"POST\",\r\n               JSON.stringify({\r\n                  email: formState.inputs.email.value,\r\n                  password: formState.inputs.password.value,\r\n               }),\r\n               { \"Content-Type\": \"application/json\" }\r\n            );\r\n\r\n            auth.login(data.userId, data.token);\r\n         } catch (err) {}\r\n      } else {\r\n         try {\r\n            const formData = new FormData();\r\n            formData.append(\"email\", formState.inputs.email.value);\r\n            formData.append(\"name\", formState.inputs.name.value);\r\n            formData.append(\"password\", formState.inputs.password.value);\r\n            formData.append(\"image\", formState.inputs.image.value);\r\n            const data = await sendRequest(\r\n               process.env.REACT_APP_BACKEND_URL + \"/users/signup\",\r\n               \"POST\",\r\n               formData\r\n            );\r\n\r\n            auth.login(data.userId, data.token);\r\n         } catch (err) {}\r\n      }\r\n   };\r\n   function switchModeHandler() {\r\n      if (!isLogin)\r\n         setFormData(\r\n            { ...formState.inputs, name: undefined, image: undefined },\r\n            formState.inputs.email.isValid && formState.inputs.password.isValid\r\n         );\r\n      else\r\n         setFormData(\r\n            {\r\n               ...formState.inputs,\r\n               name: { value: \"\", isValid: false },\r\n               image: { value: null, isValid: false },\r\n            },\r\n            false\r\n         );\r\n      setIsLogin((isLogin) => !isLogin);\r\n   }\r\n   return (\r\n      <>\r\n         <ErrorModal error={error} onClear={clearError} />\r\n         <Card className=\"authentication\">\r\n            {isLoading && <LoadingSpinner asOverlay />}\r\n            <h2 className=\"authentication__header\">Login Required</h2>\r\n            <hr />\r\n            <form onSubmit={authSubmitHandler}>\r\n               {!isLogin && (\r\n                  <>\r\n                     <Input\r\n                        id=\"name\"\r\n                        element=\"input\"\r\n                        type=\"text\"\r\n                        label=\"Name\"\r\n                        validators={[VALIDATOR_REQUIRE()]}\r\n                        errorText=\"Please enter a valid name.\"\r\n                        onInput={inputHandler}\r\n                     />\r\n                     <ImageUpload\r\n                        id=\"image\"\r\n                        center\r\n                        onInput={inputHandler}\r\n                        errorText=\"Please provide an image.\"\r\n                     />\r\n                  </>\r\n               )}\r\n\r\n               <Input\r\n                  id=\"email\"\r\n                  element=\"input\"\r\n                  type=\"email\"\r\n                  label=\"Email\"\r\n                  validators={[VALIDATOR_EMAIL()]}\r\n                  errorText=\"Please enter a valid email address.\"\r\n                  onInput={inputHandler}\r\n               />\r\n               <Input\r\n                  id=\"password\"\r\n                  element=\"input\"\r\n                  type=\"password\"\r\n                  label=\"Password\"\r\n                  validators={[VALIDATOR_MINLENGTH(8)]}\r\n                  errorText=\"Please enter a valid password with at least 8 digits.\"\r\n                  onInput={inputHandler}\r\n               />\r\n               <Button type=\"submit\" disabled={!formState.isValid}>\r\n                  {isLogin ? \"Log In\" : \"Sign Up\"}\r\n               </Button>\r\n            </form>\r\n            <Button inverse onClick={switchModeHandler}>\r\n               {!isLogin ? \"Log In\" : \"Sign Up\"}\r\n            </Button>\r\n         </Card>\r\n      </>\r\n   );\r\n}\r\n"],"names":["ImageUpload","props","file","setFile","useState","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","_jsxs","className","children","_jsx","id","style","display","ref","type","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","concat","center","src","alt","Button","onClick","current","click","errorText","inputReducer","state","action","value","val","validate","validators","isTouched","inputState","dispatch","useReducer","initialValue","initialValid","changeHandler","touchHandler","element","placeholder","onBlur","rows","htmlFor","label","Modal","onCancel","onClear","header","show","error","footer","ModalOverlay","content","headerClass","onSubmit","preventDefault","contentClass","footerClass","ReactDOM","document","getElementById","_Fragment","Backdrop","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","useHttpClient","isLoading","setIsLoading","setError","activeHttpRequests","sendRequest","async","url","method","arguments","undefined","body","headers","httpAbortCtrl","AbortController","push","response","fetch","signal","data","json","filter","re","ok","Error","message","err","forEach","abortCtrl","abort","clearError","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","validator","trim","test","Auth","auth","useContext","AuthContext","isLogin","setIsLogin","inputHandler","setFormData","email","password","ErrorModal","Card","LoadingSpinner","asOverlay","process","JSON","stringify","login","userId","token","formData","FormData","append","name","image","Input","disabled","inverse"],"sourceRoot":""}